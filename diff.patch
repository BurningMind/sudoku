diff --git a/Generator.java b/Generator.java
index 4acab3d..8ece6c1 100644
--- a/Generator.java
+++ b/Generator.java
@@ -1,10 +1,66 @@
+import java.util.ArrayList;
+
 public class Generator {
 
-    private static final int UNICITY_ITERATIONS = 10;
+    private static final int UNICITY_ITERATIONS = 3;
+
+    public enum DIFFICULTY {
+        EASY,
+        MEDIUM,
+        HARD
+    }
+
+    public Board generateSudoku (DIFFICULTY difficulty) { //degré de difficulté ?
+        int lowestSudoku = Board.SIZE * Board.SIZE;
+        while (true) {
+            ArrayList < Board > steps = new ArrayList < Board > ();
+            Board generatedSudoku = new Board();
+            Solver solver = new Solver ( generatedSudoku );
+            solver.solveBoard();
+            steps.add(generatedSudoku);
+
+            while(true){
+                Board b = new Board(generatedSudoku);
+                b = deleteNumber(b);
+                if (verifyUnicity(b)) {
+                    steps.add(b);
+                    generatedSudoku = b;
+                } else {
+                    break;
+                }
+            }
+
+            // if (lowestSudoku >= (Board.SIZE * Board.SIZE - steps.size())) {
+            //     lowestSudoku = (Board.SIZE * Board.SIZE - steps.size());
+            //     System.out.println("\nFound a sudoku with " + lowestSudoku + " (" + steps.size() + " numbers removed).");
+            //     System.out.print("Tried " + attempts + " sudokus.");
+            // } else {
+            //     System.out.print("\rTried " + attempts + " sudokus.");
+            // }
 
-    // public Board generateSudoku () { //degré de difficulté ?
-    //
-    // }
+            if (steps.size() > (Board.SIZE * Board.SIZE) / 1.6) {
+                if (difficulty == DIFFICULTY.HARD) {
+                    return steps.get(steps.size() - 1);
+                } else if (difficulty == DIFFICULTY.MEDIUM) {
+                    return steps.get((int)((steps.size() - 1) * 0.72));
+                } else if (difficulty == DIFFICULTY.EASY) {
+                    return steps.get((int)((steps.size() - 1) * 0.44));
+                }
+            }
+            if (steps.size() > (Board.SIZE * Board.SIZE) / 2.3) {
+                if (difficulty == DIFFICULTY.MEDIUM) {
+                    return steps.get((int)((steps.size() - 1) * 0.95));
+                } else if (difficulty == DIFFICULTY.EASY) {
+                    return steps.get((int)((steps.size() - 1) * 0.6));
+                }
+            }
+            if (steps.size() > (Board.SIZE * Board.SIZE) / 3.2) {
+                if (difficulty == DIFFICULTY.EASY) {
+                    return steps.get((int)((steps.size() - 1) * 0.8));
+                }
+            }
+        }
+    }
 
     public boolean verifyUnicity (Board b ) {
         Board[] boards = new Board[UNICITY_ITERATIONS];
@@ -28,8 +84,23 @@ public class Generator {
         return true;
     }
 
-    // public Board deleteNumber (Board b ) {
-    //
-    // }
+    public Board deleteNumber (Board b) {
+
+        Board board = new Board(b);
+        int x;
+        int y;
+
+        while (true){
+            x = (int)(Math.random()*Board.SIZE);
+            y = (int)(Math.random()*Board.SIZE);
+
+            if (board.getNumber(x, y) != 0 ) {
+                board.setNumber(x, y, 0);
+                break;
+            }
+        }
+
+        return board;
+    }
 
 }
diff --git a/Sudoku.java b/Sudoku.java
index 8ebe92d..d059204 100644
--- a/Sudoku.java
+++ b/Sudoku.java
@@ -3,85 +3,64 @@ public class Sudoku {
     public static void main (String[] args ) {
 
         Board.SIZE = Integer.parseInt(args[0]);
-        Board board = new Board();
 
-        board.setNumber(0, 0, 1);
-        board.setConst(0, 0, true);
-        board.setNumber(5, 0, 7);
-        board.setConst(5, 0, true);
-        board.setNumber(7, 0, 9);
-        board.setConst(7, 0, true);
-
-        board.setNumber(1, 1, 3);
-        board.setConst(1, 1, true);
-        board.setNumber(4, 1, 2);
-        board.setConst(4, 1, true);
-        board.setNumber(8, 1, 8);
-        board.setConst(8, 1, true);
-
-        board.setNumber(2, 2, 9);
-        board.setConst(2, 2, true);
-        board.setNumber(3, 2, 6);
-        board.setConst(3, 2, true);
-        board.setNumber(6, 2, 5);
-        board.setConst(6, 2, true);
-
-        board.setNumber(2, 3, 5);
-        board.setConst(2, 3, true);
-        board.setNumber(3, 3, 3);
-        board.setConst(3, 3, true);
-        board.setNumber(6, 3, 9);
-        board.setConst(6, 3, true);
-
-        board.setNumber(1, 4, 1);
-        board.setConst(1, 4, true);
-        board.setNumber(4, 4, 8);
-        board.setConst(4, 4, true);
-        board.setNumber(8, 4, 2);
-        board.setConst(8, 4, true);
-
-        board.setNumber(0, 5, 6);
-        board.setConst(0, 5, true);
-        board.setNumber(5, 5, 4);
-        board.setConst(5, 5, true);
-
-        board.setNumber(0, 6, 3);
-        board.setConst(0, 6, true);
-        board.setNumber(7, 6, 1);
-        board.setConst(7, 6, true);
-
-        board.setNumber(1, 7, 4);
-        board.setConst(1, 7, true);
-        board.setNumber(8, 7, 7);
-        board.setConst(8, 7, true);
-
-        board.setNumber(2, 8, 7);
-        board.setConst(2, 8, true);
-        board.setNumber(6, 8, 3);
-        board.setConst(6, 8, true);
+        // board.setNumber(0, 0, 1);
+        // board.setConst(0, 0, true);
+        // board.setNumber(5, 0, 7);
+        // board.setConst(5, 0, true);
+        // board.setNumber(7, 0, 9);
+        // board.setConst(7, 0, true);
+        //
+        // board.setNumber(1, 1, 3);
+        // board.setConst(1, 1, true);
+        // board.setNumber(4, 1, 2);
+        // board.setConst(4, 1, true);
+        // board.setNumber(8, 1, 8);
+        // board.setConst(8, 1, true);
+        //
+        // board.setNumber(2, 2, 9);
+        // board.setConst(2, 2, true);
+        // board.setNumber(3, 2, 6);
+        // board.setConst(3, 2, true);
+        // board.setNumber(6, 2, 5);
+        // board.setConst(6, 2, true);
+        //
+        // board.setNumber(2, 3, 5);
+        // board.setConst(2, 3, true);
+        // board.setNumber(3, 3, 3);
+        // board.setConst(3, 3, true);
+        // board.setNumber(6, 3, 9);
+        // board.setConst(6, 3, true);
+        //
+        // board.setNumber(1, 4, 1);
+        // board.setConst(1, 4, true);
+        // board.setNumber(4, 4, 8);
+        // board.setConst(4, 4, true);
+        // board.setNumber(8, 4, 2);
+        // board.setConst(8, 4, true);
+        //
+        // board.setNumber(0, 5, 6);
+        // board.setConst(0, 5, true);
+        // board.setNumber(5, 5, 4);
+        // board.setConst(5, 5, true);
+        //
+        // board.setNumber(0, 6, 3);
+        // board.setConst(0, 6, true);
+        // board.setNumber(7, 6, 1);
+        // board.setConst(7, 6, true);
+        //
+        // board.setNumber(1, 7, 4);
+        // board.setConst(1, 7, true);
+        // board.setNumber(8, 7, 7);
+        // board.setConst(8, 7, true);
+        //
+        // board.setNumber(2, 8, 7);
+        // board.setConst(2, 8, true);
+        // board.setNumber(6, 8, 3);
+        // board.setConst(6, 8, true);
 
         Generator gen = new Generator();
-        System.out.println("Unique ? " + gen.verifyUnicity(board));
-
-        Solver solver = new Solver(board);
-        int compteur = 0;
-
-        while (!solver.nextStep()) {
-            compteur++;
-            // try {
-            //     Thread.sleep(25);
-            // } catch (Exception e) {}
-
-            double pourcentage = (compteur / 23930039.0) * 100.0;
-            //System.out.println(" Etape numero : " + compteur );
-            if (compteur % 10000 == 0)
-                System.out.printf("\r%f %% effectues", pourcentage);
-        }
-
-        double pourcentage = (compteur / 23930039.0) * 100.0;
-        System.out.printf("\r%f %% effectues", pourcentage);
-        System.out.println();
-        Board b = solver.getBoard();
+        Board b = gen.generateSudoku(Generator.DIFFICULTY.EASY);
 
         for (int i = 0; i < Board.SIZE; i++) {
 
@@ -108,6 +87,25 @@ public class Sudoku {
             System.out.println("|");
         }
         afficherLigne(true);
+
+        Solver solver = new Solver(b);
+        int compteur = 0;
+
+        while (!solver.nextStep()) {
+            compteur++;
+            // try {
+            //     Thread.sleep(25);
+            // } catch (Exception e) {}
+
+            double pourcentage = (compteur / 23930039.0) * 100.0;
+            //System.out.println(" Etape numero : " + compteur );
+            if (compteur % 10000 == 0)
+                System.out.printf("\r%f %% effectues", pourcentage);
+        }
+
+        double pourcentage = (compteur / 23930039.0) * 100.0;
+        System.out.printf("\r%f %% effectues", pourcentage);
+        System.out.println();
     }
 
     public static void afficherLigne(boolean show) {
